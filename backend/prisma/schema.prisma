// schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int         @id @default(autoincrement())
  email         String      @unique
  password      String
  username      String      @unique
  firstName     String
  lastName      String
  bio           String?
  avatar        String?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  emailVerified Boolean     @default(false)
  role          Role        @default(USER)
  
  // Relations
  profile       Profile?
  posts         Post[]
  comments      Comment[]
  likes         Like[]
  sentConnections     Connection[] @relation("ConnectionRequester")
  receivedConnections Connection[] @relation("ConnectionRecipient")
  experiences   Experience[]
  educations    Education[]
  socialLinks   SocialLink[]
  sessions      Session[]
  accounts      Account[]
}

model Profile {
  id               Int      @id @default(autoincrement())
  userId           Int      @unique
  user             User     @relation(fields: [userId], references: [id])
  headline         String?
  location         String?
  website          String?
  github           String?
  twitter          String?
  linkedin         String?
  stackOverflow    String?
  availableForWork Boolean  @default(false)
  skills           String[]
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
}

model Post {
  id          Int        @id @default(autoincrement())
  title       String
  content     String
  codeSnippet String?
  tags        String[]
  authorId    Int
  author      User       @relation(fields: [authorId], references: [id])
  likes       Like[]
  comments    Comment[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  visibility  Visibility @default(PUBLIC)
}

model Comment {
  id        Int      @id @default(autoincrement())
  content   String
  authorId  Int
  author    User     @relation(fields: [authorId], references: [id])
  postId    Int
  post      Post     @relation(fields: [postId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Like {
  id        Int      @id @default(autoincrement())
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  postId    Int
  post      Post     @relation(fields: [postId], references: [id])
  createdAt DateTime @default(now())

  @@unique([userId, postId])
}

model Connection {
  id           Int              @id @default(autoincrement())
  requesterId  Int
  requester    User             @relation(name: "ConnectionRequester", fields: [requesterId], references: [id])
  recipientId  Int
  recipient    User             @relation(name: "ConnectionRecipient", fields: [recipientId], references: [id])
  status       ConnectionStatus @default(PENDING)
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt

  @@unique([requesterId, recipientId])
}

model Experience {
  id          Int      @id @default(autoincrement())
  userId      Int
  user        User     @relation(fields: [userId], references: [id])
  title       String
  company     String
  location    String?
  from        DateTime
  to          DateTime?
  current     Boolean  @default(false)
  description String?
}

model Education {
  id          Int      @id @default(autoincrement())
  userId      Int
  user        User     @relation(fields: [userId], references: [id])
  school      String
  degree      String?
  fieldOfStudy String?
  from        DateTime
  to          DateTime?
  current     Boolean  @default(false)
  description String?
}

model SocialLink {
  id       Int      @id @default(autoincrement())
  userId   Int
  user     User     @relation(fields: [userId], references: [id])
  platform String
  url      String
}

// Authentication models
model Account {
  id                Int     @id @default(autoincrement())
  userId            Int
  user              User    @relation(fields: [userId], references: [id])
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  @@unique([provider, providerAccountId])
}

model Session {
  id           Int      @id @default(autoincrement())
  sessionToken String   @unique
  userId       Int
  user         User     @relation(fields: [userId], references: [id])
  expires      DateTime
}

model VerificationToken {
  id         Int      @id @default(autoincrement())
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Enums
enum Role {
  USER
  ADMIN
  MODERATOR
}

enum Visibility {
  PUBLIC
  PRIVATE
  CONNECTIONS_ONLY
}

enum ConnectionStatus {
  PENDING
  ACCEPTED
  REJECTED
  BLOCKED
}